---
title: "Tooling - webpack and Babel"
---

Now that we have clean code via a linter and can run our scripts courtesy of npm, let's work on the compilation / build of our code. In order to achieve this we are going to use two tools: webpack and Babel.

## webpack

webpack is an amazing tool that came out two or so years ago that captivated particularly the React crowd quick due to its ease and interesting features. We are going to only scratch the service of this powerful tool; you could give a whole workshop just on webpack. We are going to lean on two of webpack's core features: module compilation and the ability to plug in loaders.

As you saw with our code, it is pretty to put one or two components in one file. But what happens when you have an app as complex at Netflix that has hundreds, if not thousands, of components? Having just one file is untenable. You _could_ just split them into separate files, make sure to load them in correct order, and keep a list of files in your HTML directory. But that sucks too, so we're going to introduce a build step that, while build steps suck, this will make things a bit easier.

For fun, split your MyTitle component from ClientApp.js into a new file, MyTitle.js. You will have to put the appropriate React.DOM helper methods in each file. At the bottom of MyTitle.js, add the line <code>module.exports = MyTitle</code>. At the top of ClientApp.js, put the line <code>var MyTitle = require('./MyTitle')</code>. Let's try to compile that.

You should have webpack 1.12+ installed (this is untested on 2.0+.) Go to the directory of the project in the terminal and run <code>mkdir public</code>. After that, run <code>webpack js/ClientApp.js public/bundle.js</code>. In your index.html, change the line of <code><&NegativeMediumSpace;script src="js/ClientApp.js"></script></code> to <code><&NegativeMediumSpace;script src="public/bundle.js"></script></code>.

Try your browser again. bundle.js has all the stuff for both files now. Now we can keep components in their own files which is a huge win for organization. But wait, we can use webpack for even greater code by using it to bring in node modules. In index.html, remove the other script tags so _just_ bundle.js is left.

In ClientApp.js, remove the global comment at the top and add at the top

{% highlight javascript %}
var React = require('react')
var ReactDOM = require('react-dom')
{% endhighlight %}

Likewise at the top of MyTitle, add the line <code>var React = require('react')</code>. Run your webpack command again. Try your browser again. Despite only including bundle.js, the whole app works! If you look at webpack, you'll see it's 99% React code and some of yours. Now we can go forth making new files and including new libraries without worrying about if they are being included!

Let's add build to our npm scripts. Add to scripts in package.json <code>"build": "webpack js/ClientApp.js public/bundle.js",</code>. Run <code>npm run build</code> from your terminal in the project root directory and see if it works. Magic!

## Babel

Babel is an amazing, amazing tool that has fundamentally altered the landscape of JavaScript as we know. Though they didn't invent the idea of transpiling future syntax of JavaScript into current syntax (thanks Traceur,) they did make it so damn _easy_. Couple that with the fact it worked with React's JSX (which we'll talk about in a sec) out of the box and it was a perfect storm the be massively successful. Babel, in short, is amazing and should be something you consider for every project.

Babel 6 (the latest revision of Babel) took away a tiny bit of that ease of use but in return it became much easier to develop which is important when you're maintaining such a massive project. In return it requires a bit of config now.

Create a new file called .babelrc. Inside .babelrc, put:

{% highlight json %}
{
  "presets": ["react", "es2015"]
}
{% endhighlight %}

Babel has the concept of plugins. Each transformation comes in the form a plugin. However ES6 and React each have a number of transformation and it's a huge pain to include each one. Thus Babel has the concept of presets, or in other words bundles of plugins. In this case, we're including _all_ of the React and ES6 transformations. If this were a production app we would definitely go through and only include the transformations we needed and _not_ all of them. For example, this includes a fairly large library to get ES6 generators working. Few people these days are actually using generators and thus it's better to leave them off if you don't need them. In our case, this is a teaching app so page weight isn't a big deal to us. This will also allow us to start using JSX.

## webpack loaders

So, we could use the Babel CLI to compile our code but we are already using webpack and webpack has a good way to send your code through Babel via its loader mechanism. Loaders are utilities that webpack will pipe input into and accept output out of. You can use loaders to transpile things like CoffeeScript, TypeScript, or PureScript. Webpack loaders can do some other powerful things like allowing you to _include_ CSS, inline images via encoding, and transform SVGs. We're just going to be using the JS transformation abilities for now. Run the command <code>webpack --module-bind 'js=babel' js/ClientApp.js public/bundle.js</code>. Should take a bit longer since it's doing more. Since we're going to be using webpack for a few other things, let's abstract that configuration from inline to a config file. Add a `webpack.config.js` with the following.

{% highlight javascript %}
const path = require('path')

module.exports = {
  context: __dirname,
  entry: './js/ClientApp.js',
  output: {
    path: path.join(__dirname, '/public'),
    filename: 'bundle.js'
  },
  resolve: {
    extensions: ['', '.js', '.jsx', '.json']
  },
  stats: {
    colors: true,
    reasons: true,
    chunks: false
  },
  module: {
    loaders: [
      {
        test: /\.jsx?$/,
        loader: 'babel-loader'
      }
    ]
  }
}

{% endhighlight %}

What you see is essentially a config version of what we were doing with CLI flags. Now it's a bit more resilient and guaranteed consistent. If you run just the command <code>webpack</code> from your project directory you should get the same output. Neat. Go change you npm script to just be "webpack" now. Go try it and make sure it still works. Great! Also make sure all the files you've written are still up to snuff with standard via <code>npm run test</code>. Good? Good. This should get us to a point now where we can talk about JSX.
